package protocol;

import "mesos.proto";

option optimize_for = LITE_RUNTIME;
option java_package = "com.reverb.exeggutor.protocol";
option java_outer_classname = "Protos";
option cc_generic_services = false;
option java_generic_services = false;
option py_generic_services = false;

/* StringKeyValue represents a pair of 2 strings used as a replacement for maps
 */
message StringKeyValue {

  required string key = 1;
  required string value = 2;
}

/* StringIntKeyValue represents a pair of string to int, used as a replacement for maps
 */
message StringIntKeyValue {
  /* Key the key of this pair */
  required string key = 1;
  /* Value the value of this pair */
  required int32  value = 2;
}

/*
 * AppStatus is used to indicate where an app is in a lifecycle on the cluster
 */
enum AppStatus {
  /* AppStatus_ABSENT the application has no running instances */
  ABSENT = 1;
  /* AppStatus_DEPLOYING the application is currently being deployed */
  DEPLOYING = 2;
  /* AppStatus_STOPPED the application has been stopped */
  STOPPED = 3;
  /* AppStatus_STOPPING the application has is stopping, a command was issued to stop the app */
  STOPPING = 4;
  /* AppStatus_STARTED the application is fully available for taking requests */
  STARTED = 5;
  /* AppStatus_FAILED the application has failed in some way */
  FAILED = 6;
  /* AppStatus_UNHEALTHY the application is unhealthy in some way */
  UNHEALTHY = 7;
  /* AppStatus_DISABLING the application is being disabled */
  DISABLING = 8;
}

/*
 * ComponentType is used to describe what type of service this is.
 * This is used for determining montitoring strategy and so on. 
 * It might also influence the way an application is deployed
 */ 
enum ComponentType {
  /* ComponentType_SERVICE A long-running service */
  SERVICE = 0;
  /* ComponentType_TASK A short one-off task */
  TASK = 1;
  /* ComponentType_CRON A task scheduled to repeat on a schedule or to be executed at a later, scheduled time */
  CRON = 2;
  /* ComponentType_SPARK_JOB A spark job */
  SPARK_JOB = 3;
}

/*
 * Distribution is used to decide how an application should be deployed 
 * This determines whether it needs extraction etc. 
 */ 
enum Distribution {
  /* Distributed as a package for the OS package manager (RPM, DEB, ...)
   * This implies that a docker container will be created ad-hoc to install this package.
   * It's probably better to get jenkins to build a proper docker container for your application.
   */
  PACKAGE = 0;
  /* Distributed as a Docker Container */
  DOCKER = 1;
  /* Ad-Hoc script, fat-jar, single-binary */
  SCRIPT = 2;
  /* Distributed as executable jar */
  FAT_JAR = 3;
}

/*
 * PortMapping a port mapping for a scheme with the private port 
 * and public port. The public port is the one a service is reachable on
 * and this is mapped to a private port inside a container.
 */
message PortMapping {
  /* the scheme for this mapping */
  required string scheme = 1;
  /* the private port for usage inside the container */
  required int32 private_port = 2;
  /* the public port for usage between hosts */
  required int32 public_port = 3;
}

/* 
 * Deployment is a part of a deployed application
 * It links component definition to a mesos task info and an app status
 * This keeps track of the state an application is actually in.
 * So in an API this could be used to return the info we need for
 * displaying what has been deployed and how many instances of it and so forth. 
 */
message Deployment {
  /* the application id for the deployed application */
  required string app_id = 1;
  /* the task id that represents this component in the cluster */
  required mesos.TaskID task_id = 3;
  /* the status this deployed application is in */
  required AppStatus status = 4 [default = ABSENT ];
  /* the unix epoch when then component was started */
  required int64 deployed_at = 5;

  /* the slave id to which this app is deployed */
  optional mesos.SlaveID slave = 20;
  /* the host name this component is deployed to */
  optional string host_name = 21;
  /* the known port mappings for this component */
  repeated PortMapping port_mapping = 22;
}

/*
 * Application is a part of what makes up a single application.
 * It describes the packaging and distribution model of the component
 * It also describes the requirements for the component in terms of disk space, cpu and memory
 * Furthermore it contains the configuration for the environment and scheme to port mapping
 * It also has a status field to track the deployment status of this component
 */
message Application {
  /* the id of the application `app_name-name-version` */
  required string id = 1;
  /* the name for this component */
  required string name = 2;
  /* the amount of cpu cores this component requires */
  required float cpus = 3;
  /* the amount of memory this component requires */
  required float mem = 4;
  /* the amount of disk space this component requires */
  required int64 disk_space = 5;
  /* the url to use when deploying the application */
  required string dist_url = 6;
  /* the command to run when this application is deployed */
  required string command = 7;
  /* the environment variables passed to the application */
  repeated StringKeyValue env = 8;
  /* the scheme/port mapping for this component */
  repeated StringIntKeyValue ports = 9;
  /* the version for this component */
  required string version = 10;
  /* the application this component belongs to */
  required string app_name = 11;
  /* Active is true when this app should be deployed */
  required bool active = 12;
  /* the distribution model used for this component */
  required Distribution distribution = 13 [ default = DOCKER ];
  /* the modality as to how to treat this component */
  required ComponentType component_type = 14 [ default = SERVICE ];


  /* where to expect logs to appear */
  optional string log_dir = 30;
  /* where to expect work to appear */
  optional string work_dir = 31;
  /* where to expect the configuration to be */
  optional string conf_dir = 32;
  /* the application SLA to use for this component */
  optional ApplicationSLA sla = 33;
}

/*
 * ScheduledAppComponent a structure to describe an application
 * component that has been scheduled for deployment.
 */ 
message ScheduledApp {
  /* Id the id of the scheduled component (for retrieval from persistence medium for example) */
  required string app_id = 1;
  /* Component the full component that has been scheduled */
  required Application app = 4;
  /* Position the full position of this item in the queue */
  required int32 position = 5;
  /* Since the timestamp in nanoseconds when this item was added to the queue */
  required int64 since = 6;
}

/* 
 * HealthCheckMode the strategy to use when checking for health.
 * for the HTTP strategy we make a request
 */
enum HealthCheckMode {
  /* For the HTTP strategy it will make a request and expect a 200 OK status */
  HTTP = 0;
  /* For the TCP strategy it will just try to connect to the port */
  TCP = 1;
  /* For the METRICS strategy it will use the HTTP strategy but additionally the response body will be validated that all components are running fine. */
  METRICS = 2;
}

/*
 * HealthCheckResultCode a code representing the result of a health check
 */
enum HealthCheckResultCode {
  /* the service responded in time and all looks great */
  HEALTHY = 0;
  /* the service responded with an unexpected status code */
  ERROR = 1;
  /* the service didn't respond in time to the healthcheck */
  TIMEDOUT = 2;
  /* the service was unreachable */
  DOWN = 3;
  /* we haven't checked the state yet etc... noop */
  UNKNOWN = 99;

}

/* 
 * HealthCheck describes a health check for an application. 
 * For the TCP strategy it will just try to connect to the port 
 * For the HTTP strategy it will make a request and expect a 200 OK status
 * For the METRICS strategy it will use the HTTP strategy but additionally
 * the response body will be validated that all components are running fine.
 */ 
message HealthCheck {
  /* The strategy to use for the health check */
  required HealthCheckMode mode = 1 [ default = HTTP ];
  /* The delay in milliseconds to delay the initial health check after entering running state */
  required int64 ramp_up = 2;
  /* The interval in milliseconds at which to perform health checks */
  required int64 interval_millis = 3;
  /* How quick should a health check return to be successful (in millis) */
  required int64 timeout = 5;

  /* when this is a http health check it will use this path to make the request */
  optional string path = 20 [ default = "/api/api-docs" ];
  /* for a http health check it will use this, other possible value is http */
  optional string scheme = 21 [ default = "http" ];
}

/* 
 * ApplicationSLA an application SLA describes what makes a service healthy
 * It is used to enforce how many instance of an application should be running
 * it also defines the health check used and how many health checks should fail
 * 
 */ 
message ApplicationSLA {
  /* The minimum number of instances that needs to be deployed */
  required int32 min_instances = 1 [ default = 1 ];
  /* The maximum number of instances that is deployed */
  required int32 max_instances = 2 [ default = 1 ];
  /* The health check to use */
  required HealthCheck health_check = 3;
  /* The amount of health checks that have to fail sequentially to be considered unhealthy */
  required int32 unhealthy_at = 4;
}
